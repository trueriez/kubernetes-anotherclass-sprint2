pipeline {
    agent any

    tools {
        gradle 'gradle-8.10'
        jdk 'jdk-17'
    }

    environment {
        GHCR_USERNAME = 'trueriez'
        GHCR_REPO     = 'ghcr.io/trueriez/api-tester'
        GITHUB_URL    = 'https://github.com/trueriez/kubernetes-anotherclass-sprint2.git'
        CLASS_NUM     = '2221'
        APP_VERSION   = '0.0.1-SNAPSHOT' // JAR 버전 변수화
        IMAGE_TAG     = 'v1.0.0'         // Docker 태그 변수화
        NAMESPACE     = 'anotherclass-222'
        GIT_CRED_ID   = 'github-credentials'
        GHCR_CRED_ID  = 'github-container-credentials'
    }

    stages {
        stage('소스파일 체크아웃') {
            steps {
                gitCheckout(
                    repoUrl: "https://github.com/trueriez/kubernetes-anotherclass-api-tester.git",
                    branch: 'main',
                    credentialsId: GIT_CRED_ID
                )
            }
        }

        stage('소스 빌드') {
            steps {
                sh 'chmod +x ./gradlew'
                sh './gradlew clean build'
            }
        }

        stage('컨테이너 빌드 & GHCR 업로드') {
            steps {
                withCredentials([usernamePassword(credentialsId: GHCR_CRED_ID, 
                                                 usernameVariable: 'GIT_USER', 
                                                 passwordVariable: 'GIT_PAT')]) {
                    sh 'echo "$GIT_PAT" | docker login ghcr.io -u "$GIT_USER" --password-stdin'
                    sh "cp ./build/libs/app-${APP_VERSION}.jar ./${CLASS_NUM}/build/docker/app-${APP_VERSION}.jar"
                    sh "docker build -t ${GHCR_REPO}:${IMAGE_TAG} ./"
                    sh "docker push ${GHCR_REPO}:${IMAGE_TAG}"
                }
            }
        }

        
        stage('릴리즈파일 체크아웃') {
            steps {
                gitCheckout(
                    repoUrl: GITHUB_URL,
                    branch: 'main',
                    credentialsId: GIT_CRED_ID,
                    sparseCheckout: "/${CLASS_NUM}"
                )
            }
        }

        
        stage('헬름 템플릿 확인') {
            steps {
                sh """
                    helm template api-tester-${CLASS_NUM} ./${CLASS_NUM}/deploy/helm/4.addition/api-tester \
                        -n ${NAMESPACE} --create-namespace
                """
            }
        }

        stage('헬름 배포') {
            steps {
                input message: '배포를 시작하시겠습니까?', ok: 'Yes'
                sh """
                    helm upgrade api-tester-${CLASS_NUM} ./${CLASS_NUM}/deploy/helm/4.addition/api-tester \
                        -n ${NAMESPACE} --create-namespace --install --atomic --timeout 5m
                """
            }
        }
    }

    post {
        success {
            echo "빌드 및 배포가 성공적으로 완료되었습니다."
        }
        failure {
            echo "빌드 또는 배포에 실패했습니다. 로그를 확인하세요."
        }
        always {
            cleanWs() // 워크스페이스 정리
        }
    }
}

// Git 체크아웃 커스텀 함수
def gitCheckout(Map args) {
    checkout scmGit(
        branches: [[name: "*/${args.branch}"]],
        extensions: args.sparseCheckout ? [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: args.sparseCheckout]]]] : [],
        userRemoteConfigs: [[url: args.repoUrl, credentialsId: args.credentialsId]]
    )
}
